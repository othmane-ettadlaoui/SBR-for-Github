library(shiny.exe)
library(shiny.exe)
hostWin(
appDir = 'C:/Users/LENOVO/Desktop/TestFunctionSBR',
port = getOption('shiny.port'),
launch.browser = TRUE,
host = '127.0.0.1',
workerId = '',
quiet = FALSE,
display.mode = c('auto', 'normal', 'showcase'),
test.mode = getOption('shiny.testmode', FALSE))
CSR_base = function(CSR_marche, CSR_concentration, CSR_contrepartie, CSR_souscription_vie, CSR_souscription_nonvie){
#le variable dans lequelle je vais stocker le resultat
resultat = 0
# recuperation du matrice de correlation d'un fichier excel
rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
#ecrire les CSR_Parametres pour recuperer ses indices
CSR = c(CSR_marche, CSR_concentration, CSR_contrepartie, CSR_souscription_vie, CSR_souscription_nonvie)
for (i in seq_along(CSR)) {
for (j in seq_along(CSR)){
resultat = resultat + rho_mat[i,j]*CSR[i]*CSR[j]
}
}
resultat = sqrt(resultat)
print(paste("la valeur de CSR_base :",resultat))
return(resultat)
}
CSR_base(10,10,10,10,10)
#CSR
library(readxl)
library(openxlsx)
CSR_base = function(CSR_marche, CSR_concentration, CSR_contrepartie, CSR_souscription_vie, CSR_souscription_nonvie){
#le variable dans lequelle je vais stocker le resultat
resultat = 0
# recuperation du matrice de correlation d'un fichier excel
rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
#ecrire les CSR_Parametres pour recuperer ses indices
CSR = c(CSR_marche, CSR_concentration, CSR_contrepartie, CSR_souscription_vie, CSR_souscription_nonvie)
for (i in seq_along(CSR)) {
for (j in seq_along(CSR)){
resultat = resultat + rho_mat[i,j]*CSR[i]*CSR[j]
}
}
resultat = sqrt(resultat)
print(paste("la valeur de CSR_base :",resultat))
return(resultat)
}
CSR_base(10,10,10,10,10)
# CSR de base:
CSR_base = function(CSR_marche, CSR_concentration, CSR_contrepartie, CSR_souscription_vie, CSR_souscription_nonvie, rho_mat){
#le variable dans lequelle je vais stocker le resultat
resultat = 0
# recuperation du matrice de correlation d'un fichier excel (on va parametre cette etape)
#rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
#ecrire les CSR_Parametres pour recuperer ses indices
CSR = c(CSR_marche, CSR_concentration, CSR_contrepartie, CSR_souscription_vie, CSR_souscription_nonvie)
for (i in seq_along(CSR)) {
for (j in seq_along(CSR)){
resultat = resultat + rho_mat[i,j]*CSR[i]*CSR[j]
}
}
resultat = sqrt(resultat)
print(paste("la valeur de CSR_base est :",resultat))
return(resultat)
}
# recuperation du matrice de correlation d'un fichier excel (on va parametre cette etape)
rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
CSR_base = function(CSR_marche, CSR_concentration, CSR_contrepartie, CSR_souscription_vie, CSR_souscription_nonvie, rho_mat){
#le variable dans lequelle je vais stocker le resultat
resultat = 0
# recuperation du matrice de correlation d'un fichier excel (on va parametre cette etape)
rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
#ecrire les CSR_Parametres pour recuperer ses indices
CSR = c(CSR_marche, CSR_concentration, CSR_contrepartie, CSR_souscription_vie, CSR_souscription_nonvie)
for (i in seq_along(CSR)) {
for (j in seq_along(CSR)){
resultat = resultat + rho_mat[i,j]*CSR[i]*CSR[j]
}
}
resultat = sqrt(resultat)
print(paste("la valeur de CSR_base est :",resultat))
return(resultat)
}
CSR_base(10,10,10,10,10)
CSR_marche = function(CSR_action, CSR_taux, CSR_change, CSR_immobilier, CSR_ecart_taux, rho_mat){
resultat = 0
rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
CSR = c(CSR_action, CSR_taux, CSR_change, CSR_immobilier, CSR_ecart_taux)
for (i in seq_along(CSR)) {
for (j in seq_along(CSR)){
resultat = resultat + rho_mat[i,j]*CSR[i]*CSR[j]
}
}
resultat = sqrt(resultat)
print(paste("la valeur de CSR_base est :",resultat))
return(resultat)
}
CSR_marche(10,10,10,10,10)
CSR_marche = function(CSR_action, CSR_taux, CSR_change, CSR_immobilier, CSR_ecart_taux, rho_mat){
resultat = 0
rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
CSR = c(CSR_action, CSR_taux, CSR_change, CSR_immobilier, CSR_ecart_taux)
for (i in seq_along(CSR)) {
for (j in seq_along(CSR)){
resultat = resultat + rho_mat[i,j]*CSR[i]*CSR[j]
}
}
resultat = sqrt(resultat)
paste("la valeur de CSR_base est :",resultat)
return(resultat)
}
CSR_marche(10,10,10,10,10)
CSR_marche = function(CSR_action, CSR_taux, CSR_change, CSR_immobilier, CSR_ecart_taux, rho_mat){
resultat = 0
rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
CSR = c(CSR_action, CSR_taux, CSR_change, CSR_immobilier, CSR_ecart_taux)
for (i in seq_along(CSR)) {
for (j in seq_along(CSR)){
resultat = resultat + rho_mat[i,j]*CSR[i]*CSR[j]
}
}
resultat = sqrt(resultat)
print(paste("la valeur de CSR_base est :",resultat))
return(resultat)
}
CSR_marche(10,10,10,10,10)
CSR_contrepartie = function(CSR_cpt_type1, CSR_cpt_type2,rho_mat){
resultat = 0
rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
CSR=c(CSR_cpt_type1, CSR_cpt_type2)
for (i in seq_along(CSR)) {
for (j in seq_along(CSR)){
resultat = resultat + rho_mat[i,j]*CSR[i]*CSR[j]
}
}
resultat = sqrt(resultat)
print(paste("la valeur de CSR_contrepartie est :",resultat))
return(resultat)
}
#CSR_contrepartie
CSR_contrepartie = function(CSR_cpt_type1, CSR_cpt_type2,rho_mat){
resultat = 0
rho_mat = as.matrix(read_excel("Rho_Mat.xlsx","rho_mat",col_names = FALSE))
CSR=c(CSR_cpt_type1, CSR_cpt_type2)
for (i in seq_along(CSR)) {
for (j in seq_along(CSR)){
resultat = resultat + rho_mat[i,j]*CSR[i]*CSR[j]
}
}
resultat = sqrt(resultat)
print(paste("la valeur de CSR_contrepartie est :",resultat))
return(resultat)
}
vec =c (seq(1))
vec =c (seq(1,9))
vec
vec =c (seq(1))
vec
vec =c (seq(1))
vec
vec =c (seq(1,9))
vec
vec =c (rep(1,9))
vec
sum(vec)
vec^2
vec =c (rep(2,9))
vec
vec^2
sum(vec^2)
sqrt(sum(vec^2))
#CSR_concentration:
CSR_concentration = function(CSR){
print(paste("la valeur de CSR_concentration est:",sqrt(sum(CSR^2))))
return(sqrt(sum(CSR^2)))
}
# CSR_operationnel
CSR_operationnel = function(CSR_base, X){
resultat = CSR_base * X
print(paste("la valeur de CSR_operationnel est :",resultat))
return(resultat)
}
Adj_assures=function(CSRB_nettes, CSRB_bruttes, BDF){
resultat = min(abs(CSRB_nettes - CSRB_bruttes ),BDF)
print(paste("la valeur de Adj_assures est :",resultat))
return(resultat)
}
Adj_impotsDifferes = function(TX_impots, CSR_base,CSR_operationnel,Adj_assures,impots_Actifs, impos_Passif){
if(impos_Passif- impots_Actifs>0) {ecart = impos_Passif- impots_Actifs
}else {ecart = 0}
resultat = TX_impots * min((CSR_base + CSR_operationnel - Adj_assures),ecart)
print(paste("la valeur de Adj_impotsDifferes est :",resultat))
return(resultat)
}
#CSR_longevite:
CSR_longevite = function(BE_baisse, BE){
resultat = BE_baisse - BE
print(paste("la valeur de CSR_longevite est :",resultat))
return(resultat)
}
CSR_rachat = function(BE_hausse, BE_baisse, BE){
CSR_hausse = BE_hausse - BE
CSR_baisse = BE_baisse - BE
resultat = max(CSR_hausse, CSR_baisse)
print(paste("la valeur de CSR_rachat est :",resultat))
return(resultat)
}
install.packages("shiny.exe")
return(resultat)
shiny::runApp()
runApp()
runApp()
runApp()
